arrays:
	same as python
	to add use the .push method
	use .pop to get rid of last element
	negitive indexes are strange (makes nested arrays hard)
	
for loops:
	same as c#
	syntax: for(call variable; set condition; set increment;), for (let i = 0; i < 5; i++){}
	can use break and continue
	varables are not local
	
objects(four types):
	type1:
		like a python dictionary, but can have method inbeded like a class
	type2:
		use let obj = new Object(); then add to the obeject using obj.newProperty = "value"
	type3:
		can create a new one from existing object using Object.create(existingObject)
	type4:
		use classes(very weird not sure the benifit)
		example:
			class MyClass {
  				constructor(property1, property2, property3) {
    					this.property1 = property1;
    					this.property2 = property2;
    					this.property3 = property3;
  				}
			}

		var myObject = new MyClass("value1", "value2", "value3");

DOM:
	what it does
		changes or removes HTML elemets
		change or add css styles
		read and change elements atributes
		create new html elements
		add event listeners(keypress, click, submit)
	getElementByID()
		gives DOM element for this, the argument is just a string, no extra character need to be added specify that its an ID
	get elements by class or tag name
		getElementsByClassName()
			takes in the class name and returns something similar to an array
		getElementsByTagNAme()
			takes in the tag name and returns an array like getting by class name
		for both can use array.forEach after you turn it into an array
			use Array.from(object returned form methods)
			syntax for foreach: array.forEach(function(item){code to run}
	querySelector
		document.querySelector()
		needs symbol for class or id specification
		can use pshudo classes
		can only select one element, use .querySelectorAll() to get all the elements
	changing text and content
		get text with .textContent
		InnerHTML will get all the html including children, can append by setting it equal to html(.innerHTML = <p>something</>)
	DOM nodes
		there are node types, can get with .nodeType
		return number, can get key on w3schools
		can also use nodeName to get tag or name of the node
		can also check if it had any children with .hasChildNodes
		can also clone with .cloneNote(), use true for argument to get all content and not just single element
	traversing the DOM
		to get parent of an element use .parentNode, also has .parentElement
		to get childNodes use .childNodes, this returns children and textNodes
		use .children to get only the elements
		siblings:
			to get next sibling down the DOM, use .nextSibling, use .nextElementSibling to only get elements
			to get previous one, use .previousSibling, or PreviousElementSibling
			can use .querySelector on elements to only search that set
	events
		you need to add an even listener to the element to check
		to add an even listener use, .addEventListener("event type", <function to run> function(e){})
			e is the event object properties when fired,
			for example use the "e" parameter to check if the shift key was pressed when even was called
			e.target will be the element
		to delete use parent.removeChild(element To remove)
		to prevent browser default use e.preventDefault();
	event bubbling
		one event listener to run all the other inside
		instead of have 5 event listerns to 5 button, just one for all of them
		use e.target.className() to what the target was
		e.target will be the object theat was clicked or where the event happened
		use this so that you can add elements and not add an listener
	interacting with forms
		can use document.forms to get all the forms, returns an html collection of forms
		in document.forms, use [] to specify id
		might need to prevent behavior
	creating elements
		use document.createElement() argument is a tag of the element
		appendToDOM
			use, parent.appendChild(created child element), ORDER MATTERS
		add content
			use .textContent atribute to set the shown text
	changing styles and classes
		to apply styles use .styles.<css property> (use camelCase to do the properties)
		to get class, use element.className, set it equal to something to set the name
		or
		element.classList.add or .remove to add or remove a class from the element
	atributes
		use element.getAtribute() argument is the atribute to check so maybe 'class'
		use .setAtribute() takes two argument, first is the class the second is the value
		to check if it has it use .hasAtribute() with the atribute to check in the argument
		to remove use .removeAtribute
	ckeckbox and change events	
		use ckeckbox.checked() to get if its checked
		the event to listen to is "change"
		to hide is .style.diplay = "none"
	DOMContentLoaded
		needed if the scipt is in head or before DOM is loaded
		it just checks if the DOM is loaded, once it is it runs
		wrap all the code in this so that the code runs only once the DOM is loaded
BOM:
	what is it
		its a set of function and tools that allow the developer to interact with the the borowser, like window size, location, history, and the navigator objects
	difference beween BOM and DOM
		the DOM let devs interact with the elemements and the html
		the BOM allows the dev to interact with the browser itself, and minipulate the webpage
	displaying with the BOM
		this allows the dev to interact with the user with prompt, alert, confirm, etc
	determine screen size with BOM
		you can use the screen object to get the users screen size oin pixles
	window vs document
		the window is the browser window 
		the document is the html,
		these are for different things, document is DOM, window is BOM
	

other
	to use strict:
		use: 
		(function() {
    			'use strict';
			//code here
		)();
	to use new javascript add coment "// jshint esversion: 6" to the top

	debugging
		use the debugger keyword to pause the script
		this let the dev check everything

	events
		onload: This event is fired when a web page has finished loading all of its resources, including images, stylesheets, and scripts.
		onfocus: This event is fired when an element (such as a text input or button) receives focus, meaning the user has clicked on it or tabbed to it.
		onblur: This event is fired when an element loses focus, meaning the user has clicked or tabbed away from it.
		onchange: This event is fired when the value of an input element (such as a text input, checkbox, or select box) has changed.
		onkeydown: This event is fired when a key on the keyboard is pressed down.
		onkeyup: This event is fired when a key on the keyboard is released.
		onkeypress: This event is fired when a key on the keyboard is pressed and released in quick succession.
		onclick: This event is fired when an element (such as a button or link) is clicked.
		onmouseover: This event is fired when the user's mouse cursor enters an element.
		onmouseout: This event is fired when the user's mouse cursor leaves an element.

		Each of these events can be attached to an HTML element using an "on" attribute, such as onclick="myFunction()", or they can be attached to an element using JavaScript code, such as myElement.addEventListener('click', myFunction). When the event is fired, the associated function (such as myFunction()) is executed.